// Page 001 from Lucid, the Dataflow Programming Language.
// Simple ISWIM example.

// sqroot(avg(square(a)))
// where
//   square(x) = x * x;
//   avg(y) = mean
//   where
//     n = 1 fby n + 1;
//     mean = first y fby mean + d;
//     d = (next y - mean) / (n + 1);
//   end;
//   sqroot(z) = approx asa err < 0.0001
//   where
//     Z is current z;
//     approx = Z / 2 fby (approx + Z / approx) / 2;
//     err = abs(square(approx) - Z);
//   end;
// end

// Name the float constants being used below.

var float₁ = floatmp"1.0" ;;
var float₂ = floatmp"2.0" ;;
var precision = floatmp"0.0001" ;;

// Define the functions bottom-up.

// Square of x.
fun square.x = x * x ;;

// Running sum, in direction d, of stream X. 
fun avg.d X = mean
where 
  var mean = fby.d X (mean + diff) ;;
  var diff = (next.d X - mean) / (convert!floatmp!(index!d + 1)) ;;
end ;;

// Square root of x, using Newton-Raphson.
fun sqroot.x = asa.d approx (err < precision)
where
  dim d <- 0 ;;
  var approx = fby.d (x / float₂) ((approx + x / approx) / float₂) ;;
  var err = abs!(square.approx - x) ;;
end ;;

// Running standard deviation, in direction d, of stream X.
fun stddev.d X = sqroot.(avg.d (square.X)) ;;

// Define some data.

dim a ;;
var A = fby.a float₁ (A * float₂) ;;
var B = stddev.a A ;;

// Test the functions on the data.

%%
B @ [a <- 1] ;;
$$ %%
B @ [a <- 2] ;;
$$ %%
B @ [a <- 3] ;;
$$ %%
B @ [a <- 4] ;;
$$ %%
B @ [a <- 5] ;;
$$ %%
B @ [a <- 6] ;;
$$ %%
B @ [a <- 7] ;;
$$ %%
B @ [a <- 8] ;;
$$ %%
B @ [a <- 9] ;;
$$ %%
B @ [a <- 10] ;;
