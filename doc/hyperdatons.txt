dimensions:

the dimensions arg[0..inf] are reserved for function parameters

the system responds to the "id" dimension for identifiers
the @ [] on the lhs is in the dimension _validguard

CONST uses type and text

dimension indexes are stored in
DIMENSION_INDEX
   named dimensions in @ [name : string]
   typed dimension in @ [arg0 : tv]

identifiers:
constants are CONST
functions are FUN
default int is in DEFAULTINT

constants that are defined:
uchar

constants that need defining:
bool
special
string
intmp

types:
need to remove the magic for type indexes (RTTI?)
things like special should be built by asking the system for a special instead
of just building it
the index of a type could be part of the system, anyone can ask for it, and
then only if an implementation can see the header declaration for the class of
a type can it access the type.

When a constant is registered it must set CONST.
It must also call _unique and set TYPEINDEX.

it is required that some type and dimension indexes be fixed and visible to 
everyone

   types:
      ustring     TYPE_INDEX_USTRING
      intmp       TYPE_INDEX_INTMP
      bool        TYPE_INDEX_BOOL

   dimensions:
      type        DIM_TYPE
      text        DIM_TEXT
      name        DIM_NAME
      id          DIM_ID

operations and arg{0..inf}:
we need to work out how exactly to do this in TL, this requires the default
not found equation when the name is argN to add it return the new index

TODO:
DIMENSION_INDEX needs to be defined and keep track of dimensions
this requires two things:
   - the fixed dimensions be registered
   - whenever the user looks up a dimension it registers it if it doesn't
     exist

DIMENSION_INDEX @ [text : ustring] = ...;;
DIMENSION_INDEX @ [value : any] = ...;;
... will be a special hyperdaton which is hooked up to the dim translator
class.

operations:
FUN @ [op : ustring<operator?>, arg0 : intmp, arg1 : intmp] = 

the actual op will be implemented as a binary op, thus I need to write a
hyperdaton which takes the args out and gives it to the op
